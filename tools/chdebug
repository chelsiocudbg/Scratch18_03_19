#! /bin/bash

# This script will create archives with OS, Adapter and CUDBG logs
# use -h/--help to print help messages.
# =================================================================

VERSION=1.0

PWD=$(pwd)

args=("$@") 
cmd_args=${#args[@]} 
myname=$(basename $0)
fbusid=""
global_print_once=""
cudbgmbox=6
cudbgpayload=""

function handle_interrupt
{
	kill -SIGTERM 0
	wait
}

trap handle_interrupt SIGINT SIGTERM

renice -n -20 $$

if [[ $cmd_args -ne 0 ]] ; then
	for (( i=0;i<$cmd_args;i++)); do 
		if [[ ${args[${i}]} == "-h" ]] || [[ ${args[${i}]} == "--help" ]]; then
			echo -e "\n${myname} v${VERSION}\n------------------\n"
			echo "Execute this script with root privilages to collect chelsio debug logs"
			echo -e "./$myname"
			echo -e "-b <bus id>\t - Provide bus id, format: 01:00.4 or 0000:01:00.4"
			echo -e "\n-c <mbox>\t - Cudbg mailbox number (0-6) from which to collect cudbg logs. Default 6."
			echo -e "\n--getpayload\t - Collect Payload Data in EDC and MC."
			echo -e "\n-h,--help\t - Print help"
			echo -e "\nThe ${myname} script will collect Chelsio debug information\n"
			exit 0
		elif [[ ${args[${i}]} == "-b" ]];then
			i=$((i + 1))
			if [[ $i -ge $cmd_args ]];then
				echo -e "\n\tWrong Input\n"
				exit 0
			fi
			fbusid=${args[${i}]}	
			if ! [[ $fbusid =~ ^0000.* ]]
			then
				fbusid=0000:$fbusid
			fi
			fbusid=${fbusid%.*}.4
		elif [[ ${args[${i}]} == "-c" ]];then
			i=$((i + 1))
			if [[ $i -ge $cmd_args ]]; then
				echo -e "\n\tWrong Input\n"
				exit 0
			fi
			cudbgmbox=`expr ${args[${i}]} + 0`
			if [[ -z $cudbgmbox ]] || [[ $cudbgmbox -gt 6 ]]; then
				cudbgmbox=6
			fi
		elif [[ ${args[${i}]} == "--getpayload" ]];then
			cudbgpayload="--getpayload"
		else
			echo "Invalid argument specified, Please use --help for more information."
			exit 1
		fi
	done
fi

if [[ $EUID -ne 0 ]] ; then
	echo "Please execute this script with root privilages, use --help for more information."
	exit 1
fi

logdir_name=IBM_chelsio_debug_logs
logdir=${PWD}/$logdir_name
debugfs_dir=$logdir/debugfs
logfile=${logdir}/chelsio_debug.log
cudbgdir=${logdir}/cudbg
cudbglog=${cudbgdir}/cudbg
debugfs_path=/sys/kernel/debug

if [ -d $logdir ] ; then
	old_dir=${logdir}_old
	mkdir -p $old_dir
	mv $logdir $old_dir/$(date '+%d_%b_%Y_%H_%M_%S')
fi
mkdir -p $logdir $cudbgdir $debugfs_dir

function header
{
	clear
	echo "************************************"
	echo "    Chelsio Debug Collector v${VERSION}"
	echo "************************************"
}

declare -a fbuspath
bus_ids=$(lspci -D | grep -i -e '00\.4.*Chelsio'| awk '{print $1}')
bus_len=$(lspci -D | grep -c -i -e '00\.4.*Chelsio'| awk '{print $1}')
adaptype=$(lspci | grep -i -e '00\.4.*Chelsio'| awk '{print $7}')

function getbusid
{
	fbusid=${bus_ids[*]}
}

if [[ -z $fbusid ]]; then
	getbusid
fi

if [[ -z $fbusid ]]; then
	echo -e "\n\tChelsio card not found\n"
	exit 0
fi

function is_driver_loaded
{
	local driver res

	driver="$1"
	res=$(lsmod | grep $driver)
	if [[ $res == "" ]];then
		echo 0
	else
		echo 1
	fi
}

function getfullbuspath
{
	for fbuss in $fbusid ; do
		fbid=`expr $fbid + 1 `
		fbuspath[fbid]=/sys/bus/pci/devices/${fbuss}
		if [[ -f ${fbuspath[fbid]}/vendor ]];then
			vendor=$(cat ${fbuspath[fbid]}/vendor)
			if ! [[ $vendor -eq "0x1425" ]];then
				echo -e "\n\t\"$fbuss\" is not chelsio Bus\n"
				exit 0
			fi
		else
			echo -e "\n\t\"${fbuspath[fbid]}/vendor\" not found: [May be invalid Bus]\n"
			exit 0
		fi
	done
}

getfullbuspath

function print_once
{
	if [[ -z "$global_print_once" ]]; then
		echo "$1" "$2"
	fi
}

function writelog
{
	echo $1 >> $logfile
}

function printhead
{
	writelog ""
	writelog "#######################################" 
	writelog "####$1"
	writelog "#######################################"
}

function printhead2
{
	writelog "###############$1###############"
}

function cmdlog
{
	local cmd

	writelog ""
	cmd="$1"
	printhead2 "$cmd"
	if [[ $2 -eq 1 ]] ; then
		$cmd | tee -a $logfile
	else
		$cmd >> $logfile
	fi
}

function mount_debugfs
{
	local debug_path

	debug_path="$(mount | grep -w debugfs | awk '{print $3;}')"
	if [[ -n "$debug_path" ]]; then
		debugfs_path="$debug_path"
	fi

	###
	# See if debugfs is already mounted.  If not mounted, then mount it if our
	# drivers are loaded; and after collecting logs, unmount it.
	###
	if ! [[ -d "$debugfs_path/cxgb4" ]] && ! [[ -d "$debugfs_path/csiostor" ]]; then
		if [[ -n "$(lsmod | grep -w ^cxgb4)" ]] || [[ -n "$(lsmod | grep -w ^csiostor)" ]]; then
			mount -t debugfs none $debugfs_path
			debugfs_need_unmount=1
		fi
	fi
}

function unmount_debugfs
{
	###
	# If we forcefully mounted debugfs, unmount it here.
	###
	if [[ $debugfs_need_unmount -gt 0 ]]; then
		umount $debugfs_path
	fi
}

function get_debugfs_entity
{
	local extract_debugfs_dir
	local entity entity_file
	local driver cmd
	local busp

	entity=$1
	driver=$2
	busp="$3"

	extract_debugfs_dir=$debugfs_dir/$busp
	if ! [[ -d $extract_debugfs_dir/$driver ]];then
		mkdir -p $extract_debugfs_dir/$driver
	fi

	if [[ -f $debugfs_path/$driver/$busp/$entity ]];then
		entity_file=$extract_debugfs_dir/$driver/$entity
		cmd="nice -n -20 cp $debugfs_path/$driver/$busp/$entity $entity_file"
		cmdlog "$cmd" 1 > /dev/null 2>&1
		chmod 444 $entity_file
		return 0
	fi
	return 1
}

function is_intfs_for_bus
{
	local eth_bus intfs busp

	busp=$1
	intfs=$2

	# removing . and : from bus string
	busp=$(echo $busp | sed -e 's/\.//g' | sed -e 's/\://g')

	eth_bus=$(ethtool  -i $intfs | awk '/bus-info/ {print $2}')
	eth_bus=$(echo $eth_bus | sed -e 's/\.//g' | sed -e 's/\://g')
	if [[ "$eth_bus" == "$busp" ]];then
		echo "1"
		return
	fi

	echo "0"
}

function get_ch_intfs
{
	local allintfs ch_intfs intfs
	local vendor_id busp
	local ret

	busp=$1
	allintfs=$(ls /sys/class/net)
	ch_intfs=()
	for intfs in $allintfs;do
		if [[ -f /sys/class/net/$intfs/device/vendor ]];then
			vendor_id=$(cat /sys/class/net/$intfs/device/vendor)
			if [[ $vendor_id == "0x1425" ]];then
				ret=$(is_intfs_for_bus $busp $intfs)
				if [[ $ret == "1" ]];then
					ch_intfs+=("$intfs")
				fi
			fi
		fi
	done

	echo ${ch_intfs[@]}
}

###
# Entities that need extra time or formatting for collection and
# hence should be collected last
###
declare -a skip_entities=(
	'edc0'
	'edc1'
	'mc0'
	'mc1'
)

function collect_cudbg_entities
{
	local cudbgbusp busp buspath
	local ch_intfs ch_intf
	local pcie_path
	local skip_str
	local cmd res

	buspath="$1"
	busp=$(basename $buspath)
	cudbgbusp=$(echo $busp | sed s/'\w*$'//)
	cudbgbusp+=$cudbgmbox

	pcie_path=$(dirname $buspath)
	pcie_path+="/$cudbgbusp/"

	print_once "-e" "\n-------------------------------------------------"
	print_once "Collecting cudbg entities"
	print_once "-e" "-------------------------------------------------"
	###
	# Convert array elements to comma separated string.
	###
	skip_str=$(IFS=,; echo "${skip_entities[*]}")

	###
	# Collect some entities from debugfs if cxgb4 is loaded.
	# Else, collect from cudbg.
	###
	res=$(is_driver_loaded cxgb4)
	if [[ $res == 0 ]]; then
		cmdlog "nice -n -20 $CUDBG_BIN --collect all $pcie_path ${cudbglog}_${cudbgbusp}.log --skip $skip_str $cudbgpayload" 1 > /dev/null 2>&1
		return
	fi

	# get all chelsio inteface according to busp
	ch_intfs=$(get_ch_intfs $busp)
	# one interface is enough for getting cudbg logs for each Bus
	ch_intf=$(echo $ch_intfs | awk '{print $1}')
	if [[ $ch_intf == "" ]];then
		cmdlog "nice -n -20 $CUDBG_BIN --collect all $pcie_path ${cudbglog}_${cudbgbusp}.log --skip $skip_str $cudbgpayload" 1 > /dev/null 2>&1
		return
	fi

	cmd="nice -n -20 ethtool -W $ch_intf 0x2"
	printhead2 "$cmd"
	$cmd > /dev/null 2>&1
	res=$?
	if [[ $res == 0 ]]; then
		cmd="nice -n -20 ethtool -w $ch_intf data ${cudbglog}_${cudbgbusp}.log"
		printhead2 "$cmd"
		$cmd > /dev/null 2>&1
		res=$?
		if [[ $res == 0 ]]; then
			return
		fi
	fi

	cmdlog "nice -n -20 $CUDBG_BIN --collect all $pcie_path ${cudbglog}_${cudbgbusp}.log --skip $skip_str $cudbgpayload" 1 > /dev/null 2>&1
}

function collect_cudbg_edc
{
	local collect_entity_list
	local busp cudbgbusp
	local pcie_path
	local eths
	local res

	eths="$1"

	busp=$(basename $eths)
	cudbgbusp=$(echo $busp | sed s/'\w*$'//)
	cudbgbusp+=$cudbgmbox

	pcie_path=$(dirname $eths)
	pcie_path+="/$cudbgbusp/"

	print_once "-e" "\n-------------------------------------------------"
	print_once "-e" "Collecting edc logs"

	cmdlog "nice -n -20 $CUDBG_BIN --collect edc0,edc1 $pcie_path ${cudbglog}_${cudbgbusp}_edc.log $cudbgpayload" 1 > /dev/null 2>&1
	print_once "-e" "-------------------------------------------------"
}

function collect_cudbg_mc
{
	local collect_entity_list
	local busp cudbgbusp
	local mc cudbg_mc
	local pcie_path
	local eths
	local res

	eths="$1"
	mc="$2"
	cudbg_mc="$mc"

	busp=$(basename $eths)
	cudbgbusp=$(echo $busp | sed s/'\w*$'//)
	cudbgbusp+=$cudbgmbox

	pcie_path=$(dirname $eths)
	pcie_path+="/$cudbgbusp/"

	###
	# For T6, there is only one "mc" in debugfs.
	# Cudbg internally uses "mc0" entity to collect this "mc" in debugfs.
	# So, translate to Cudbg's internal format.
	###
	if [[ $mc == "mc" ]]; then
		cudbg_mc="mc0"
	fi

	print_once "-e" "\n-------------------------------------------------"
	print_once "-e" "Collecting mc logs"

	cmdlog "nice -n -20 $CUDBG_BIN --collect $cudbg_mc $pcie_path ${cudbglog}_${cudbgbusp}_${mc}.log $cudbgpayload" 1 > /dev/null 2>&1
	print_once "-e" "-------------------------------------------------"
}

function collect_cudbg_mc_entities
{
	local card card_type
	local buspath

	buspath="$1"
	card=$($CUDBG_BIN --debug vpddata $buspath | grep MN | awk '{print $2'})
	card_type=${card:1:1}

	###
	# If it's a T6 card, collect "mc", if it exists.
	# Otherwise, collect "mc0" and "mc1", if they exist.
	###
	if [[ $card_type == "6" ]]; then
		collect_cudbg_mc $buspath "mc"
	else
		collect_cudbg_mc $buspath "mc0"
		collect_cudbg_mc $buspath "mc1"
	fi
}

###
# Entities that need to be collected from /sys/kernel/debug/cxgb4/*
###
declare -a cxgb4_debugfs_entities=(
	'mbox0'
	'mbox1'
	'mbox2'
	'mbox3'
	'mbox4'
	'mbox5'
	'mbox6'
	'mbox7'
	'sge_qinfo'
	'clip_tbl'
	'l2t'
	'sensors'
	'trace0'
	'trace1'
	'trace2'
	'trace3'
	'use_backdoor'
	'trace_rss'
	'tids'
)

function collect_cxgb4_debugfs
{
	local i busp
	local res

	busp="$1"
	print_once "-e" "\n-------------------------------------------------"
	print_once "Collecting cxgb4 debugfs"
	res=$(is_driver_loaded cxgb4)
	if [[ $res == 0 ]]; then
		print_once "cxgb4 driver is not loaded"
		print_once "-e" "-------------------------------------------------"
		return
	fi

	for i in ${!cxgb4_debugfs_entities[@]}; do
		get_debugfs_entity "${cxgb4_debugfs_entities[$i]}" "cxgb4" "$busp" &
	done
	print_once "-e"  "-------------------------------------------------"
}

###
# Entities that need to be collected from /sys/kernel/debug/iw_cxgb4/*
###
declare -a iw_cxgb4_debugfs_entities=(
	'eps'
	'qps'
	'stags'
	'stats'
)

function collect_iw_cxgb4_debugfs
{
	local busp
	local res

	busp="$1"
	print_once "-e" "\n-------------------------------------------------"
	print_once "Collecting iw_cxgb4 debugfs"
	res=$(is_driver_loaded "iw_cxgb4")
	if [[ $res == 0 ]]; then
		print_once "iw_cxgb4 driver is not loaded"
		print_once "-e" "-------------------------------------------------"
		return
	fi

	for i in ${!iw_cxgb4_debugfs_entities[@]}; do
		get_debugfs_entity "${iw_cxgb4_debugfs_entities[$i]}" "iw_cxgb4" "$busp" &
	done
	print_once "-e" "-------------------------------------------------"
}

function change_pf
{
	local extract_debugfs_dir busp pf

	busp="$2"
	if [[ $# -eq 1 ]] ; then
		pf=$1
	else
		pf=4
	fi 

	busp=$(echo $busp | sed s/'\w*$'//)$pf
	extract_debugfs_dir=$debugfs_dir/$busp
	mkdir -p $extract_debugfs_dir
	echo "$busp"
}

echo "Collecting OS debug logs at $logfile"
echo "This may take sometime, Please Wait.."
echo > $logfile

if [[ $bus_len -eq 0 ]] ; then
	writelog "No chelsio Adapters found"
	adaptype=""
fi

ethinterfaces=$(ifconfig -a | awk '/^[a-z]/ { print $1 } ' | awk -F ":" '{print $1}')

chcount=0
declare -a chintf #Array to store all chelsio interfaces
for chbusinf in ${fbusid[*]} ; do
	for intf in $ethinterfaces ; do
		if [[ $intf == "lo" ]] ; then
			continue
		fi
		chhwid=$(ethtool -i $intf | grep -c -E $chbusinf 2>/dev/null)
		if [ $chhwid -gt 0 ] ; then
			chcount=` expr $chcount + 1 `
			chint[chcount]=$intf
		fi
	done
done

CUDBG_BIN=$(which cudbg_app 2>/dev/null)
if [[ $? -ne 0 ]] ; then 
	CUDBG_BIN=${PWD}/bin/cudbg_app
	if [[ ! -f $CUDBG_BIN ]] ; then
		CUDBG_BIN=${PWD}/cudbg_app
		if [[ ! -f $CUDBG_BIN ]] ; then
			echo -e "\nChelsio \"cudbg_app\" utility is needed to collect adapter debug logs."
			echo 	"The cudbg_app utility can be installed using Chelsio Unified wire source package."
			exit 3
		fi
	fi
fi

function collect_cudbg_debug_entities
{
	local buspath
	local busp

	buspath="$1"
	busp=$(basename $buspath)

	# collecting debugfs from pf 4
	busp=$(change_pf 4 "$busp")

	collect_cudbg_entities "$buspath"
}

function collect_debugfs_entities
{
	local buspath
	local busp

	buspath="$1"
	busp=$(basename $buspath)

	# collecting debugfs from pf 4
	busp=$(change_pf 4 "$busp")

	collect_cxgb4_debugfs "$busp"

	collect_iw_cxgb4_debugfs "$busp"
}

mount_debugfs
echo -e "\nCollecting Adapter logs for bus id's ${fbusid[*]} using CUDBG... \n"
for buspath in ${fbuspath[*]} ; do
	collect_cudbg_debug_entities "$buspath" &
	collect_debugfs_entities "$buspath" &
	global_print_once=1
done
wait

global_print_once=""
for buspath in ${fbuspath[*]} ; do
	collect_cudbg_edc "$buspath"
	collect_cudbg_mc_entities "$buspath" &
	global_print_once=1
done
wait
unmount_debugfs
