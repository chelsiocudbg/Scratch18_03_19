From 91abd6818e64fe3a320188ea1c2f1cf12547f0ec Mon Sep 17 00:00:00 2001
From: Rahul Lakkireddy <rahul.lakkireddy@chelsio.com>
Date: Mon, 6 Nov 2017 15:17:34 +0530
Subject: [PATCH 2/3] cxgb4: collect cudbg debug logs during kernel crash

Register panic notifier to collect cudbg logs during kernel panic.
Also add support to collect cudbg logs in kdump kernel.

Signed-off-by: Rahul Lakkireddy <rahul.lakkireddy@chelsio.com>
---
 drivers/net/ethernet/chelsio/cxgb4/cudbg_lib.c   |   9 ++
 drivers/net/ethernet/chelsio/cxgb4/cxgb4.h       |   5 +
 drivers/net/ethernet/chelsio/cxgb4/cxgb4_cudbg.c |   2 +-
 drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c  |  45 ++++++-
 drivers/net/ethernet/chelsio/cxgb4/t4_hw.c       | 155 ++++++++++++++++++++++-
 5 files changed, 208 insertions(+), 8 deletions(-)

diff --git a/drivers/net/ethernet/chelsio/cxgb4/cudbg_lib.c b/drivers/net/ethernet/chelsio/cxgb4/cudbg_lib.c
index 1eab8c5c..9218e24c 100644
--- a/drivers/net/ethernet/chelsio/cxgb4/cudbg_lib.c
+++ b/drivers/net/ethernet/chelsio/cxgb4/cudbg_lib.c
@@ -2118,6 +2118,14 @@ int cudbg_collect_vpd_data(struct cudbg_init *pdbg_init,
 	struct vpd_params vpd = { 0 };
 	int rc, ret;
 
+	if (padap->flags & K_CRASH) {
+		memcpy(&vpd, &padap->params.vpd, sizeof(struct vpd_params));
+		scfg_vers = padap->params.scfg_vers;
+		vpd_vers = padap->params.vpd_vers;
+		fw_vers = padap->params.fw_vers;
+		goto fill_vpd;
+	}
+
 	rc = t4_get_raw_vpd_params(padap, &vpd);
 	if (rc < 0)
 		return rc;
@@ -2154,6 +2162,7 @@ int cudbg_collect_vpd_data(struct cudbg_init *pdbg_init,
 	if (rc)
 		return rc;
 
+fill_vpd:
 	rc = cudbg_get_buff(pdbg_init, dbg_buff, sizeof(struct cudbg_vpd_data),
 			    &temp_buff);
 	if (rc)
diff --git a/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h b/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h
index a6a95b13..6e05f10f 100644
--- a/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h
+++ b/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h
@@ -513,6 +513,7 @@ enum {                                 /* adapter flags */
 	USING_SOFT_PARAMS  = (1 << 6),
 	MASTER_PF          = (1 << 7),
 	FW_OFLD_CONN       = (1 << 9),
+	K_CRASH            = (1 << 10),
 };
 
 struct rx_sw_desc;
@@ -838,6 +839,10 @@ struct adapter {
 
 	/* Ethtool Dump */
 	struct ethtool_dump eth_dump;
+
+	u32 *dump_buf;
+	u32 dump_buf_size;
+	struct notifier_block panic_nb;
 };
 
 /* Defined bit width of user definable filter tuples
diff --git a/drivers/net/ethernet/chelsio/cxgb4/cxgb4_cudbg.c b/drivers/net/ethernet/chelsio/cxgb4/cxgb4_cudbg.c
index 591b7d94..9330b41a 100644
--- a/drivers/net/ethernet/chelsio/cxgb4/cxgb4_cudbg.c
+++ b/drivers/net/ethernet/chelsio/cxgb4/cxgb4_cudbg.c
@@ -366,7 +366,7 @@ static void cxgb4_cudbg_collect_entity(struct cudbg_init *pdbg_init,
 
 		/* Skip entities that won't fit in output buffer */
 		entity_size = cxgb4_get_entity_length(adap, e->entity);
-		if (entity_size >
+		if (!(adap->flags & K_CRASH) && entity_size >
 		    pdbg_init->outbuf_size - *tot_size - total_size) {
 			dev_warn(adap->pdev_dev, "No space for entity %s, Skipping",
 				 cxgb4_entity_string[e->entity]);
diff --git a/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c b/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c
index b30e04dd..c6a66556 100644
--- a/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c
+++ b/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c
@@ -3718,6 +3718,22 @@ static struct fw_info *find_fw_info(int chip)
 	return NULL;
 }
 
+#define DUMP_BUF_SIZE (150 * 1024 * 1024)
+
+static int panic_notify(struct notifier_block *this, unsigned long event,
+                       void *ptr)
+{
+	struct adapter *adap = container_of(this, struct adapter, panic_nb);
+
+	dev_info(adap->pdev_dev, "Initialized cxgb4 crash handler");
+	adap->flags |= K_CRASH;
+
+	cxgb4_cudbg_collect_panic(adap, adap->dump_buf, adap->dump_buf_size);
+	dev_info(adap->pdev_dev, "cxgb4 debug collection succeeded..");
+
+	return NOTIFY_DONE;
+}
+
 /*
  * Phase 0 of initialization: contact FW, obtain config, perform basic init.
  */
@@ -4179,6 +4195,28 @@ static int adap_init0(struct adapter *adap)
 	t4_init_sge_params(adap);
 	adap->flags |= FW_OK;
 	t4_init_tp_params(adap, true);
+
+	/* cudbg feature is only supported for T5/T6 cards for now */
+	if (CHELSIO_CHIP_VERSION(adap->params.chip) >= CHELSIO_T5) {
+		adap->dump_buf_size = DUMP_BUF_SIZE;
+		adap->dump_buf = t4_alloc_mem(adap->dump_buf_size);
+		if (!adap->dump_buf) {
+			dev_err(adap->pdev_dev,
+				"Not enough memory for debug buffers.\n"
+				"Continuing without crash debug collection.");
+		} else {
+			dev_info(adap->pdev_dev,
+				 "Registering cxgb4 panic handler.., "
+				 "Buffer start address = %p, size: %u",
+				 adap->dump_buf, adap->dump_buf_size);
+			adap->panic_nb.notifier_call = panic_notify;
+			adap->panic_nb.priority = INT_MAX;
+
+			atomic_notifier_chain_register(&panic_notifier_list,
+						       &adap->panic_nb);
+		}
+	}
+
 	return 0;
 
 	/*
@@ -4926,7 +4964,6 @@ static int init_one(struct pci_dev *pdev, const struct pci_device_id *ent)
 	if (err)
 		goto out_free_adapter;
 
-
 	if (!is_t4(adapter->params.chip)) {
 		s_qpp = (QUEUESPERPAGEPF0_S +
 			(QUEUESPERPAGEPF1_S - QUEUESPERPAGEPF0_S) *
@@ -5231,6 +5268,12 @@ static void remove_one(struct pci_dev *pdev)
 		pci_release_regions(pdev);
 		kfree(adapter->mbox_log);
 		synchronize_rcu();
+		if (adapter->dump_buf) {
+			t4_free_mem(adapter->dump_buf);
+			atomic_notifier_chain_unregister(&panic_notifier_list,
+							 &adapter->panic_nb);
+		}
+
 		kfree(adapter);
 	} else
 		pci_release_regions(pdev);
diff --git a/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c b/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c
index 4a611586..492d4583 100644
--- a/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c
+++ b/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c
@@ -255,6 +255,143 @@ static void t4_record_mbox(struct adapter *adapter,
 	entry->execute = execute;
 }
 
+#define CIM_PF_NOACCESS 0xeeeeeeee
+/*
+ * The maximum number of times to iterate for FW reply before
+ * issuing a mailbox timeout
+ */
+#define FW_REPLY_WAIT_LOOP 6000000
+
+/**
+ *	t4_wr_mbox_meat_timeout_panic - send a command to FW through the given
+ *	mailbox. This function is a minimal version of t4_wr_mbox_meat_timeout()
+ *	and is only invoked during a kernel crash. Since this function is
+ *	called through a atomic notifier chain ,we cannot sleep awaiting a
+ *	response from FW, hence repeatedly loop until we get a reply.
+ *
+ *	@adap: the adapter
+ *	@mbox: index of the mailbox to use
+ *	@cmd: the command to write
+ *	@size: command length in bytes
+ *	@rpl: where to optionally store the reply
+ */
+
+static int t4_wr_mbox_meat_timeout_panic(struct adapter *adap, int mbox,
+			    const void *cmd, int size, void *rpl)
+{
+	u32 v;
+	u64 res;
+	int i, ret;
+	u64 cnt;
+	const __be64 *p = cmd;
+	u32 data_reg = PF_REG(mbox, CIM_PF_MAILBOX_DATA_A);
+	u32 ctl_reg = PF_REG(mbox, CIM_PF_MAILBOX_CTRL_A);
+	u32 ctl;
+	__be64 cmd_rpl[MBOX_LEN/8];
+	u32 pcie_fw;
+
+	if ((size & 15) || size > MBOX_LEN)
+		return -EINVAL;
+
+	/* Check for a firmware error which we'll report as a
+	 * device error.
+	 */
+	pcie_fw = t4_read_reg(adap, PCIE_FW_A);
+	if (pcie_fw & PCIE_FW_ERR_F) {
+		t4_report_fw_error(adap);
+		ret = (pcie_fw & PCIE_FW_ERR_F) ? -ENXIO : -EBUSY;
+		return ret;
+	}
+
+	/* Attempt to gain access to the mailbox.
+	 */
+	for (i = 0; i < 4; i++) {
+		ctl = t4_read_reg(adap, ctl_reg);
+		v = MBOWNER_G(ctl);
+		if (v != MBOX_OWNER_NONE)
+			break;
+	}
+
+	/* If we were unable to gain access, report the error to our caller.
+	 */
+	if (v != MBOX_OWNER_DRV) {
+		t4_report_fw_error(adap);
+		ret = (v == MBOX_OWNER_FW) ? -EBUSY : -ETIMEDOUT;
+		return ret;
+	}
+
+	/* If we gain ownership of the mailbox and there's a "valid" message
+	 * in it, this is likely an asynchronous error message from the
+	 * firmware.  So we'll report that and then proceed on with attempting
+	 * to issue our own command ... which may well fail if the error
+	 * presaged the firmware crashing ...
+	 */
+	if (ctl & MBMSGVALID_F) {
+		dev_err(adap->pdev_dev, "found VALID command in mbox %u: "
+		       "%llx %llx %llx %llx %llx %llx %llx %llx\n", mbox,
+		       (unsigned long long)t4_read_reg64(adap, data_reg),
+		       (unsigned long long)t4_read_reg64(adap, data_reg + 8),
+		       (unsigned long long)t4_read_reg64(adap, data_reg + 16),
+		       (unsigned long long)t4_read_reg64(adap, data_reg + 24),
+		       (unsigned long long)t4_read_reg64(adap, data_reg + 32),
+		       (unsigned long long)t4_read_reg64(adap, data_reg + 40),
+		       (unsigned long long)t4_read_reg64(adap, data_reg + 48),
+		       (unsigned long long)t4_read_reg64(adap, data_reg + 56));
+	}
+
+	/* Copy in the new mailbox command and send it on its way ...
+	 */
+	for (i = 0; i < size; i += 8, p++)
+		t4_write_reg64(adap, data_reg + i, be64_to_cpu(*p));
+
+
+	t4_write_reg(adap, ctl_reg, MBMSGVALID_F | MBOWNER_V(MBOX_OWNER_FW));
+	t4_read_reg(adap, ctl_reg);	/* flush write */
+
+	/* Loop waiting for the reply; bail out if we time out or the firmware
+	 * reports an error.
+	 */
+	for (cnt = 0;
+	    !((pcie_fw = t4_read_reg(adap, PCIE_FW_A)) & PCIE_FW_ERR_F) &&
+	    cnt < FW_REPLY_WAIT_LOOP;
+	    cnt++) {
+		v = t4_read_reg(adap, ctl_reg);
+		if (v == CIM_PF_NOACCESS)
+			continue;
+		if (MBOWNER_G(v) == MBOX_OWNER_DRV) {
+			if (!(v & MBMSGVALID_F)) {
+				t4_write_reg(adap, ctl_reg,
+					     MBOWNER_V(MBOX_OWNER_NONE));
+				continue;
+			}
+
+			/*
+			 * Retrieve the command reply and release the mailbox.
+			 */
+			get_mbox_rpl(adap, cmd_rpl, size/8, data_reg);
+			t4_write_reg(adap, ctl_reg, MBOWNER_V(MBOX_OWNER_NONE));
+
+			res = be64_to_cpu(cmd_rpl[0]);
+			if (FW_CMD_OP_G(res >> 32) == FW_DEBUG_CMD) {
+				res = FW_CMD_RETVAL_V(EIO);
+			} else if (rpl)
+				memcpy(rpl, cmd_rpl, size);
+			return -FW_CMD_RETVAL_G((int)res);
+		}
+	}
+
+	/* We timed out waiting for a reply to our mailbox command.  Report
+	 * the error and also check to see if the firmware reported any
+	 * errors ...
+	 */
+	ret = (pcie_fw & PCIE_FW_ERR_F) ? -ENXIO : -ETIMEDOUT;
+	dev_err(adap->pdev_dev, "command %#x in mailbox %d timed out\n",
+		*(const u8 *)cmd, mbox);
+
+	t4_report_fw_error(adap);
+	return ret;
+}
+
 /**
  *	t4_wr_mbox_meat_timeout - send a command to FW through the given mailbox
  *	@adap: the adapter
@@ -441,8 +578,12 @@ int t4_wr_mbox_meat_timeout(struct adapter *adap, int mbox, const void *cmd,
 int t4_wr_mbox_meat(struct adapter *adap, int mbox, const void *cmd, int size,
 		    void *rpl, bool sleep_ok)
 {
-	return t4_wr_mbox_meat_timeout(adap, mbox, cmd, size, rpl, sleep_ok,
-				       FW_CMD_MAX_TIMEOUT);
+	if (adap->flags & K_CRASH)
+		return t4_wr_mbox_meat_timeout_panic(adap, mbox, cmd, size,
+						     rpl);
+	else
+		return t4_wr_mbox_meat_timeout(adap, mbox, cmd, size, rpl,
+					       sleep_ok, FW_CMD_MAX_TIMEOUT);
 }
 
 static int t4_edc_err_read(struct adapter *adap, int idx)
@@ -2950,8 +3091,12 @@ static int flash_wait_op(struct adapter *adapter, int attempts, int delay)
 			return 0;
 		if (--attempts == 0)
 			return -EAGAIN;
-		if (delay)
-			msleep(delay);
+		if (delay) {
+			if (adapter->flags & K_CRASH)
+				mdelay(delay);
+			else
+				msleep(delay);
+		}
 	}
 }
 
@@ -7708,8 +7853,6 @@ static void init_link_config(struct link_config *lc, unsigned int pcaps,
 	}
 }
 
-#define CIM_PF_NOACCESS 0xeeeeeeee
-
 int t4_wait_dev_ready(void __iomem *regs)
 {
 	u32 whoami;
-- 
2.14.1

